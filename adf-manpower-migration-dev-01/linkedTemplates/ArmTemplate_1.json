{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-manpower-migration-dev-01"
		},
		"triggerEG01_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ec78c6ac-1e72-4e40-8c1d-69dcb474e84d/resourceGroups/MPG-IT-Intiway-POC/providers/Microsoft.EventGrid/topics/pippevent1000"
		},
		"triggerEGB_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ec78c6ac-1e72-4e40-8c1d-69dcb474e84d/resourceGroups/MPG-IT-Intiway-POC/providers/Microsoft.EventGrid/topics/pippevent1000"
		},
		"triggerEGReceiver_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ec78c6ac-1e72-4e40-8c1d-69dcb474e84d/resourceGroups/MPG-IT-Intiway-POC/providers/Microsoft.EventGrid/topics/eventcompleted"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/triggerEG01')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipelinetestevent",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "A",
					"subjectBeginsWith": "",
					"scope": "[parameters('triggerEG01_properties_typeProperties_scope')]",
					"events": [
						"pippevent1000"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerEGB')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipelineeventB",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "B",
					"subjectBeginsWith": "",
					"scope": "[parameters('triggerEGB_properties_typeProperties_scope')]",
					"events": [
						"pippevent1000"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerEGReceiver')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipelineeventreceiver",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "",
					"subjectBeginsWith": "",
					"scope": "[parameters('triggerEGReceiver_properties_typeProperties_scope')]",
					"events": [
						"eventcompleted"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SequentialMain')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup_GetGroupPlan",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "if_Retry_Delete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetGroupPlan]",
								"storedProcedureParameters": {
									"isSequential": {
										"type": "Boolean",
										"value": "True"
									},
									"planId": {
										"type": "Int32",
										"value": {
											"value": "@int(variables('varPlanId'))",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_migration",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreach_Group",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lookup_GetGroupPlan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup_GetGroupPlan').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "if_GroupExecutionFailed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "lookup_ExecutionFailedStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('lookup_ExecutionFailedStatus').output.firstRow.Failed",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "switch_ForEachGroup",
												"type": "Switch",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().GroupName",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "pl_GroupA",
															"activities": [
																{
																	"name": "execute_pl_GroupA",
																	"type": "ExecutePipeline",
																	"dependsOn": [],
																	"userProperties": [],
																	"typeProperties": {
																		"pipeline": {
																			"referenceName": "pl_GroupA",
																			"type": "PipelineReference"
																		},
																		"waitOnCompletion": true,
																		"parameters": {
																			"parExecutionConfigurationId": {
																				"value": "@variables('varExecutionConfigurationId')",
																				"type": "Expression"
																			},
																			"parDropId": {
																				"value": "@variables('varDropId')",
																				"type": "Expression"
																			},
																			"parDropName": {
																				"value": "@variables('varDropName')",
																				"type": "Expression"
																			},
																			"parExecutionNumber": {
																				"value": "@variables('varExecutionNumber')",
																				"type": "Expression"
																			},
																			"parNewExecution": {
																				"value": "@variables('varNewExecution')",
																				"type": "Expression"
																			},
																			"parPlanId": {
																				"value": "@variables('varPlanId')",
																				"type": "Expression"
																			},
																			"parStartGroupFromExecutionOrder": {
																				"value": "@variables('varStartGroupFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"parStartPipelineFromExecutionOrder": {
																				"value": "@variables('varStartPipelineFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"parRetryNumber": {
																				"value": "@variables('varRetryNumber')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														},
														{
															"value": "pl_GroupB",
															"activities": [
																{
																	"name": "pl_GroupB",
																	"type": "ExecutePipeline",
																	"dependsOn": [],
																	"userProperties": [],
																	"typeProperties": {
																		"pipeline": {
																			"referenceName": "pl_GroupB",
																			"type": "PipelineReference"
																		},
																		"waitOnCompletion": true,
																		"parameters": {
																			"parExecutionConfigurationId": {
																				"value": "@variables('varExecutionConfigurationId')",
																				"type": "Expression"
																			},
																			"parDropId": {
																				"value": "@variables('varDropId')",
																				"type": "Expression"
																			},
																			"parDropName": {
																				"value": "@variables('varDropName')",
																				"type": "Expression"
																			},
																			"parExecutionNumber": {
																				"value": "@variables('varExecutionNumber')",
																				"type": "Expression"
																			},
																			"parNewExecution": {
																				"value": "@variables('varNewExecution')",
																				"type": "Expression"
																			},
																			"parPlanId": {
																				"value": "@variables('varPlanId')",
																				"type": "Expression"
																			},
																			"parStartGroupFromExecutionOrder": {
																				"value": "@variables('varStartGroupFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"parStartPipelineFromExecutionOrder": {
																				"value": "@variables('varStartPipelineFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"RetryNumber": {
																				"value": "@variables('varRetryNumber')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														},
														{
															"value": "pl_GroupC",
															"activities": [
																{
																	"name": "pl_GroupC",
																	"type": "ExecutePipeline",
																	"dependsOn": [],
																	"userProperties": [],
																	"typeProperties": {
																		"pipeline": {
																			"referenceName": "pl_GroupC",
																			"type": "PipelineReference"
																		},
																		"waitOnCompletion": true,
																		"parameters": {
																			"parExecutionConfigurationId": {
																				"value": "@variables('varExecutionConfigurationId')",
																				"type": "Expression"
																			},
																			"parDropId": {
																				"value": "@variables('varDropId')",
																				"type": "Expression"
																			},
																			"parDropName": {
																				"value": "@variables('varDropName')",
																				"type": "Expression"
																			},
																			"parExecutionNumber": {
																				"value": "@variables('varExecutionNumber')",
																				"type": "Expression"
																			},
																			"parNewExecution": {
																				"value": "@variables('varNewExecution')",
																				"type": "Expression"
																			},
																			"parPlanId": {
																				"value": "@variables('varPlanId')",
																				"type": "Expression"
																			},
																			"parStartGroupFromExecutionOrder": {
																				"value": "@variables('varStartGroupFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"parStartPipelineFromExecutionOrder": {
																				"value": "@variables('varStartPipelineFromExecutionOrder')",
																				"type": "Expression"
																			},
																			"parRetryNumber": {
																				"value": "@variables('varRetryNumber')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "setvar_varGlobalError",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varGlobalError",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "lookup_ExecutionFailedStatus",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[sp_GetExecutionFailedStatus]",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqldb_migration",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "lookup_GetExecutionConfiguration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetExecutionConfiguration]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_migration",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "setvar_ExecutionConfigurationDropName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_ExecutionConfigurationId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varDropName",
							"value": {
								"value": "@activity('lookup_GetExecutionConfiguration').output.value[0].DropName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "setvar_ExecutionConfigurationId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_ExecutionConfigurationPlanId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varExecutionConfigurationId",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].Id)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "setvar_ExecutionConfigurationExecutionNumber",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_ExecutionConfigurationDropName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varExecutionNumber",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].ExecutionNumber)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "setvar_ExecutionConfigurationPlanId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_StartPipelineFromExecutionOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varPlanId",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].PlanId)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if_Retry_Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "setvar_ExecutionConfigurationExecutionNumber",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(greater(activity('lookup_GetExecutionConfiguration').output.value[0].StartGroupFromExecutionOrder,0), greater(activity('lookup_GetExecutionConfiguration').output.value[0].StartPipelineFromExecutionOrder, 0))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "execute_pl_DeleteAllMatrix",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_DeleteAllMatrix",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"parPlanId": {
												"value": "@variables('varPlanId')",
												"type": "Expression"
											},
											"parDropName": {
												"value": "@variables('varDropName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "execute_pl_DeleteForRetry",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_DeleteForRetry",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"parPlanId": {
												"value": "@variables('varPlanId')",
												"type": "Expression"
											},
											"parStartGroupFromExecutionOrder": {
												"value": "@variables('varStartGroupFromExecutionOrder')",
												"type": "Expression"
											},
											"parStartPipelineFromExecutionOrder": {
												"value": "@variables('varStartPipelineFromExecutionOrder')",
												"type": "Expression"
											},
											"parExecutionConfigurationId": {
												"value": "@variables('varExecutionConfigurationId')",
												"type": "Expression"
											},
											"parDropName": {
												"value": "@variables('varDropName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "setvar_StartGroupFromExecutionOrder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_RetryNumberFromExecutionHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varStartGroupFromExecutionOrder",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].StartGroupFromExecutionOrder)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "setvar_StartPipelineFromExecutionOrder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "setvar_StartGroupFromExecutionOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varStartPipelineFromExecutionOrder",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].StartPipelineFromExecutionOrder)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "setvar_RetryNumberFromExecutionHistory",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lookup_GetExecutionConfiguration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRetryNumber",
							"value": {
								"value": "@string(activity('lookup_GetExecutionConfiguration').output.value[0].RetryNumber)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varExecutionConfigurationId": {
						"type": "String"
					},
					"varDropId": {
						"type": "String"
					},
					"varDropName": {
						"type": "String"
					},
					"varExecutionNumber": {
						"type": "String"
					},
					"varNewExecution": {
						"type": "Boolean"
					},
					"varGlobalError": {
						"type": "String"
					},
					"varPlanId": {
						"type": "String"
					},
					"varStartGroupFromExecutionOrder": {
						"type": "String"
					},
					"varStartPipelineFromExecutionOrder": {
						"type": "String"
					},
					"varMatrixPlanId": {
						"type": "String"
					},
					"varRetryNumber": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Prototype/Sequential Groups"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_PipelinesExecution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "execute_pl_ParallelMain",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ParallelMain",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "execute_pl_SequentialMain",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_SequentialMain",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Prototype"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_SequentialMain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Start')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "if_wrong_execution",
						"description": "This condition prevents incorrect starts of previous completed executions.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "sp_GetTripletExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('sp_GetTripletExecution').output.firstRow.Triplet,'1-0-0')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "execute_pl_Start",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "sp_ResetFailedStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_PipelinesExecution",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "sp_UpdateStartDate",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_StartDate]"
									},
									"linkedServiceName": {
										"referenceName": "ls_migration",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": "sql-server-manpower-dev.database.windows.net",
											"DatabaseName": "sqldb-migration"
										}
									}
								},
								{
									"name": "sp_UpdateEndDate",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "sp_UpdateExecutionPlanHistory",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_EndDate]"
									},
									"linkedServiceName": {
										"referenceName": "ls_migration",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": "sql-server-manpower-dev.database.windows.net",
											"DatabaseName": "sqldb-migration"
										}
									}
								},
								{
									"name": "sp_UpdateExecutionPlanHistory",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "execute_pl_Start",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_InsertPlanExecutionToHistory]"
									},
									"linkedServiceName": {
										"referenceName": "ls_migration",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": "sql-server-manpower-dev.database.windows.net",
											"DatabaseName": "sqldb-migration"
										}
									}
								},
								{
									"name": "sp_ResetFailedStatus",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "sp_UpdateStartDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ResetFailFlag]",
										"storedProcedureParameters": {
											"num": {
												"value": "0",
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_migration",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": "sql-server-manpower-dev.database.windows.net",
											"DatabaseName": "sqldb-migration"
										}
									}
								}
							]
						}
					},
					{
						"name": "sp_GetTripletExecution",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetTripletExecution]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_migration",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Prototype"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_PipelinesExecution')]"
			]
		}
	]
}