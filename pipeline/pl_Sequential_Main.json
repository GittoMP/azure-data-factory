{
	"name": "pl_Sequential_Main",
	"properties": {
		"activities": [
			{
				"name": "LookupGetSequentialGroups",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set OrchestratorNewExecution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[sp_GetPipeLineGroupNameExecutionOrder]",
						"storedProcedureParameters": {
							"isSequential": {
								"type": "Boolean",
								"value": "TRUE"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_sqldb_migration",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachGroup",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LookupGetSequentialGroups",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LookupGetSequentialGroups').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "LookupGroup ReadExecutionFailed",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('LookupGroup ReadExecutionFailed').output.firstRow.Failed",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Switch_ForEachGroup",
										"type": "Switch",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"on": {
												"value": "@item().PipelineGroupName",
												"type": "Expression"
											},
											"cases": [
												{
													"value": "pl_GroupA",
													"activities": [
														{
															"name": "Execute pl_GroupA_copy1",
															"type": "ExecutePipeline",
															"dependsOn": [],
															"userProperties": [],
															"typeProperties": {
																"pipeline": {
																	"referenceName": "pl_GroupA",
																	"type": "PipelineReference"
																},
																"waitOnCompletion": true
															}
														}
													]
												},
												{
													"value": "pl_GroupB",
													"activities": [
														{
															"name": "pl_GroupB_copy1",
															"type": "ExecutePipeline",
															"dependsOn": [],
															"userProperties": [],
															"typeProperties": {
																"pipeline": {
																	"referenceName": "pl_GroupB",
																	"type": "PipelineReference"
																},
																"waitOnCompletion": true
															}
														}
													]
												},
												{
													"value": "pl_GroupC",
													"activities": [
														{
															"name": "pl_GroupC_copy1",
															"type": "ExecutePipeline",
															"dependsOn": [],
															"userProperties": [],
															"typeProperties": {
																"pipeline": {
																	"referenceName": "pl_GroupC",
																	"type": "PipelineReference"
																},
																"waitOnCompletion": true
															}
														}
													]
												},
												{
													"value": "pl_GroupCandidate",
													"activities": [
														{
															"name": "Execute pl_GroupCandidate_copy1",
															"type": "ExecutePipeline",
															"dependsOn": [],
															"userProperties": [],
															"typeProperties": {
																"pipeline": {
																	"referenceName": "pl_GroupCandidate",
																	"type": "PipelineReference"
																},
																"waitOnCompletion": false,
																"parameters": {
																	"parOrchestratorId": {
																		"value": "@variables('varOrchestratorId')",
																		"type": "Expression"
																	},
																	"parDropId": {
																		"value": "@variables('varDropId')",
																		"type": "Expression"
																	},
																	"parDropName": {
																		"value": "@variables('varDropName')",
																		"type": "Expression"
																	},
																	"parExecutionNumber": {
																		"value": "@variables('varExecutionNumber')",
																		"type": "Expression"
																	},
																	"parNewExecution": {
																		"value": "@variables('varNewExecution')",
																		"type": "Expression"
																	}
																}
															}
														}
													]
												}
											]
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Set varGlobalError",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "varGlobalError",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "LookupGroup ReadExecutionFailed",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "select Failed from dbo.PipelineOrchestrator where ToBeExecuted = 1",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_sqldb_migration",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						}
					]
				}
			},
			{
				"name": "GetPipelineOrchestrator",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[sp_GetPipelineOrchestrator]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_sqldb_migration",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set OrchestratorDropName",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set OrchestratorDropId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varDropName",
					"value": {
						"value": "@activity('GetPipelineOrchestrator').output.value[0].DropName",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set OrchestratorId",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetPipelineOrchestrator",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varOrchestratorId",
					"value": {
						"value": "@string(activity('GetPipelineOrchestrator').output.value[0].Id)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set OrchestratorDropId",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set OrchestratorId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varDropId",
					"value": {
						"value": "@string(activity('GetPipelineOrchestrator').output.value[0].DropId)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set OrchestratorExecutionNumber",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set OrchestratorDropName",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varExecutionNumber",
					"value": {
						"value": "@string(activity('GetPipelineOrchestrator').output.value[0].ExecutionNumber)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set OrchestratorNewExecution",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set OrchestratorExecutionNumber",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varNewExecution",
					"value": {
						"value": "@activity('GetPipelineOrchestrator').output.value[0].NewExecution",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"varOrchestratorId": {
				"type": "String"
			},
			"varDropId": {
				"type": "String"
			},
			"varDropName": {
				"type": "String"
			},
			"varExecutionNumber": {
				"type": "String"
			},
			"varNewExecution": {
				"type": "Boolean"
			},
			"varGlobalError": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Prototype/Sequential Groups"
		},
		"annotations": []
	}
}